// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        (unknown)
// source: plugin/feature/feature.proto

package feature

import (
	survey "github.com/mikros-dev/mikros-cli/pkg/plugin/survey"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_plugin_feature_feature_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_feature_feature_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_plugin_feature_feature_proto_rawDescGZIP(), []int{0}
}

type GetNameResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNameResponse) Reset() {
	*x = GetNameResponse{}
	mi := &file_plugin_feature_feature_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNameResponse) ProtoMessage() {}

func (x *GetNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_feature_feature_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNameResponse.ProtoReflect.Descriptor instead.
func (*GetNameResponse) Descriptor() ([]byte, []int) {
	return file_plugin_feature_feature_proto_rawDescGZIP(), []int{1}
}

func (x *GetNameResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetUINameResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUINameResponse) Reset() {
	*x = GetUINameResponse{}
	mi := &file_plugin_feature_feature_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUINameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUINameResponse) ProtoMessage() {}

func (x *GetUINameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_feature_feature_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUINameResponse.ProtoReflect.Descriptor instead.
func (*GetUINameResponse) Descriptor() ([]byte, []int) {
	return file_plugin_feature_feature_proto_rawDescGZIP(), []int{2}
}

func (x *GetUINameResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetSurveyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Survey        *survey.Survey         `protobuf:"bytes,1,opt,name=survey,proto3" json:"survey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSurveyResponse) Reset() {
	*x = GetSurveyResponse{}
	mi := &file_plugin_feature_feature_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSurveyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSurveyResponse) ProtoMessage() {}

func (x *GetSurveyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_feature_feature_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSurveyResponse.ProtoReflect.Descriptor instead.
func (*GetSurveyResponse) Descriptor() ([]byte, []int) {
	return file_plugin_feature_feature_proto_rawDescGZIP(), []int{3}
}

func (x *GetSurveyResponse) GetSurvey() *survey.Survey {
	if x != nil {
		return x.Survey
	}
	return nil
}

type ValidateAnswersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Answers       *structpb.Struct       `protobuf:"bytes,1,opt,name=answers,proto3" json:"answers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateAnswersRequest) Reset() {
	*x = ValidateAnswersRequest{}
	mi := &file_plugin_feature_feature_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateAnswersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateAnswersRequest) ProtoMessage() {}

func (x *ValidateAnswersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_feature_feature_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateAnswersRequest.ProtoReflect.Descriptor instead.
func (*ValidateAnswersRequest) Descriptor() ([]byte, []int) {
	return file_plugin_feature_feature_proto_rawDescGZIP(), []int{4}
}

func (x *ValidateAnswersRequest) GetAnswers() *structpb.Struct {
	if x != nil {
		return x.Answers
	}
	return nil
}

type ValidateAnswersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ShouldSave    bool                   `protobuf:"varint,1,opt,name=should_save,json=shouldSave,proto3" json:"should_save,omitempty"`
	Values        *structpb.Struct       `protobuf:"bytes,2,opt,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateAnswersResponse) Reset() {
	*x = ValidateAnswersResponse{}
	mi := &file_plugin_feature_feature_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateAnswersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateAnswersResponse) ProtoMessage() {}

func (x *ValidateAnswersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_feature_feature_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateAnswersResponse.ProtoReflect.Descriptor instead.
func (*ValidateAnswersResponse) Descriptor() ([]byte, []int) {
	return file_plugin_feature_feature_proto_rawDescGZIP(), []int{5}
}

func (x *ValidateAnswersResponse) GetShouldSave() bool {
	if x != nil {
		return x.ShouldSave
	}
	return false
}

func (x *ValidateAnswersResponse) GetValues() *structpb.Struct {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_plugin_feature_feature_proto protoreflect.FileDescriptor

var file_plugin_feature_feature_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2f, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x25, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x27, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x55, 0x49, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x43, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x06, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x22, 0x4b, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x73, 0x22, 0x6b, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x53, 0x61, 0x76, 0x65,
	0x12, 0x2f, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x32, 0xfd, 0x02, 0x0a, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x43, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x20, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x47, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x55, 0x49, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x22, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x49, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x16, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x22, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x27, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x53, 0x74, 0x6f,
	0x70, 0x12, 0x16, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x42, 0xbd, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0c, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x69, 0x6b, 0x72, 0x6f, 0x73, 0x2d, 0x64, 0x65, 0x76,
	0x2f, 0x6d, 0x69, 0x6b, 0x72, 0x6f, 0x73, 0x2d, 0x63, 0x6c, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x3b, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0xa2, 0x02, 0x03, 0x50, 0x46, 0x58, 0xaa, 0x02, 0x0f, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0xca, 0x02,
	0x0f, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x5c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0xe2, 0x02, 0x1b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x5c, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x10, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x3a, 0x3a, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plugin_feature_feature_proto_rawDescOnce sync.Once
	file_plugin_feature_feature_proto_rawDescData = file_plugin_feature_feature_proto_rawDesc
)

func file_plugin_feature_feature_proto_rawDescGZIP() []byte {
	file_plugin_feature_feature_proto_rawDescOnce.Do(func() {
		file_plugin_feature_feature_proto_rawDescData = protoimpl.X.CompressGZIP(file_plugin_feature_feature_proto_rawDescData)
	})
	return file_plugin_feature_feature_proto_rawDescData
}

var file_plugin_feature_feature_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_plugin_feature_feature_proto_goTypes = []any{
	(*Empty)(nil),                   // 0: plugins.feature.Empty
	(*GetNameResponse)(nil),         // 1: plugins.feature.GetNameResponse
	(*GetUINameResponse)(nil),       // 2: plugins.feature.GetUINameResponse
	(*GetSurveyResponse)(nil),       // 3: plugins.feature.GetSurveyResponse
	(*ValidateAnswersRequest)(nil),  // 4: plugins.feature.ValidateAnswersRequest
	(*ValidateAnswersResponse)(nil), // 5: plugins.feature.ValidateAnswersResponse
	(*survey.Survey)(nil),           // 6: plugins.survey.Survey
	(*structpb.Struct)(nil),         // 7: google.protobuf.Struct
}
var file_plugin_feature_feature_proto_depIdxs = []int32{
	6, // 0: plugins.feature.GetSurveyResponse.survey:type_name -> plugins.survey.Survey
	7, // 1: plugins.feature.ValidateAnswersRequest.answers:type_name -> google.protobuf.Struct
	7, // 2: plugins.feature.ValidateAnswersResponse.values:type_name -> google.protobuf.Struct
	0, // 3: plugins.feature.Plugin.GetName:input_type -> plugins.feature.Empty
	0, // 4: plugins.feature.Plugin.GetUIName:input_type -> plugins.feature.Empty
	0, // 5: plugins.feature.Plugin.GetSurvey:input_type -> plugins.feature.Empty
	4, // 6: plugins.feature.Plugin.ValidateAnswers:input_type -> plugins.feature.ValidateAnswersRequest
	0, // 7: plugins.feature.Plugin.Stop:input_type -> plugins.feature.Empty
	1, // 8: plugins.feature.Plugin.GetName:output_type -> plugins.feature.GetNameResponse
	2, // 9: plugins.feature.Plugin.GetUIName:output_type -> plugins.feature.GetUINameResponse
	3, // 10: plugins.feature.Plugin.GetSurvey:output_type -> plugins.feature.GetSurveyResponse
	5, // 11: plugins.feature.Plugin.ValidateAnswers:output_type -> plugins.feature.ValidateAnswersResponse
	0, // 12: plugins.feature.Plugin.Stop:output_type -> plugins.feature.Empty
	8, // [8:13] is the sub-list for method output_type
	3, // [3:8] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_plugin_feature_feature_proto_init() }
func file_plugin_feature_feature_proto_init() {
	if File_plugin_feature_feature_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plugin_feature_feature_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_plugin_feature_feature_proto_goTypes,
		DependencyIndexes: file_plugin_feature_feature_proto_depIdxs,
		MessageInfos:      file_plugin_feature_feature_proto_msgTypes,
	}.Build()
	File_plugin_feature_feature_proto = out.File
	file_plugin_feature_feature_proto_rawDesc = nil
	file_plugin_feature_feature_proto_goTypes = nil
	file_plugin_feature_feature_proto_depIdxs = nil
}
