// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        (unknown)
// source: plugin/survey/survey.proto

package survey

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PromptKind int32

const (
	PromptKind_PROMPT_KIND_UNSPECIFIED  PromptKind = 0
	PromptKind_PROMPT_KIND_INPUT        PromptKind = 1
	PromptKind_PROMPT_KIND_MULTI_SELECT PromptKind = 2
	PromptKind_PROMPT_KIND_MULTILINE    PromptKind = 3
	PromptKind_PROMPT_KIND_CONFIRM      PromptKind = 4
	PromptKind_PROMPT_KIND_SURVEY       PromptKind = 5
)

// Enum value maps for PromptKind.
var (
	PromptKind_name = map[int32]string{
		0: "PROMPT_KIND_UNSPECIFIED",
		1: "PROMPT_KIND_INPUT",
		2: "PROMPT_KIND_MULTI_SELECT",
		3: "PROMPT_KIND_MULTILINE",
		4: "PROMPT_KIND_CONFIRM",
		5: "PROMPT_KIND_SURVEY",
	}
	PromptKind_value = map[string]int32{
		"PROMPT_KIND_UNSPECIFIED":  0,
		"PROMPT_KIND_INPUT":        1,
		"PROMPT_KIND_MULTI_SELECT": 2,
		"PROMPT_KIND_MULTILINE":    3,
		"PROMPT_KIND_CONFIRM":      4,
		"PROMPT_KIND_SURVEY":       5,
	}
)

func (x PromptKind) Enum() *PromptKind {
	p := new(PromptKind)
	*p = x
	return p
}

func (x PromptKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PromptKind) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_survey_survey_proto_enumTypes[0].Descriptor()
}

func (PromptKind) Type() protoreflect.EnumType {
	return &file_plugin_survey_survey_proto_enumTypes[0]
}

func (x PromptKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PromptKind.Descriptor instead.
func (PromptKind) EnumDescriptor() ([]byte, []int) {
	return file_plugin_survey_survey_proto_rawDescGZIP(), []int{0}
}

type Survey struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AskOne          bool                   `protobuf:"varint,1,opt,name=ask_one,json=askOne,proto3" json:"ask_one,omitempty"`
	ConfirmQuestion *Question              `protobuf:"bytes,2,opt,name=confirm_question,json=confirmQuestion,proto3" json:"confirm_question,omitempty"`
	Questions       []*Question            `protobuf:"bytes,3,rep,name=questions,proto3" json:"questions,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Survey) Reset() {
	*x = Survey{}
	mi := &file_plugin_survey_survey_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Survey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Survey) ProtoMessage() {}

func (x *Survey) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_survey_survey_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Survey.ProtoReflect.Descriptor instead.
func (*Survey) Descriptor() ([]byte, []int) {
	return file_plugin_survey_survey_proto_rawDescGZIP(), []int{0}
}

func (x *Survey) GetAskOne() bool {
	if x != nil {
		return x.AskOne
	}
	return false
}

func (x *Survey) GetConfirmQuestion() *Question {
	if x != nil {
		return x.ConfirmQuestion
	}
	return nil
}

func (x *Survey) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

type Question struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Required      bool                   `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
	ConfirmAfter  bool                   `protobuf:"varint,2,opt,name=confirm_after,json=confirmAfter,proto3" json:"confirm_after,omitempty"`
	Prompt        PromptKind             `protobuf:"varint,3,opt,name=prompt,proto3,enum=plugins.survey.PromptKind" json:"prompt,omitempty"`
	Message       string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Name          string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Default       string                 `protobuf:"bytes,6,opt,name=default,proto3" json:"default,omitempty"`
	Condition     *QuestionCondition     `protobuf:"bytes,7,opt,name=condition,proto3" json:"condition,omitempty"`
	Options       []string               `protobuf:"bytes,8,rep,name=options,proto3" json:"options,omitempty"`
	Survey        *Survey                `protobuf:"bytes,9,opt,name=survey,proto3" json:"survey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Question) Reset() {
	*x = Question{}
	mi := &file_plugin_survey_survey_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question) ProtoMessage() {}

func (x *Question) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_survey_survey_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question.ProtoReflect.Descriptor instead.
func (*Question) Descriptor() ([]byte, []int) {
	return file_plugin_survey_survey_proto_rawDescGZIP(), []int{1}
}

func (x *Question) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *Question) GetConfirmAfter() bool {
	if x != nil {
		return x.ConfirmAfter
	}
	return false
}

func (x *Question) GetPrompt() PromptKind {
	if x != nil {
		return x.Prompt
	}
	return PromptKind_PROMPT_KIND_UNSPECIFIED
}

func (x *Question) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Question) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Question) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *Question) GetCondition() *QuestionCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Question) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Question) GetSurvey() *Survey {
	if x != nil {
		return x.Survey
	}
	return nil
}

type QuestionCondition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value         *structpb.Value        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuestionCondition) Reset() {
	*x = QuestionCondition{}
	mi := &file_plugin_survey_survey_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionCondition) ProtoMessage() {}

func (x *QuestionCondition) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_survey_survey_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionCondition.ProtoReflect.Descriptor instead.
func (*QuestionCondition) Descriptor() ([]byte, []int) {
	return file_plugin_survey_survey_proto_rawDescGZIP(), []int{2}
}

func (x *QuestionCondition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QuestionCondition) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_plugin_survey_survey_proto protoreflect.FileDescriptor

var file_plugin_survey_survey_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2f,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x01, 0x0a, 0x06, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x73, 0x6b, 0x5f, 0x6f, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x73, 0x6b, 0x4f, 0x6e, 0x65, 0x12, 0x43,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd2, 0x02, 0x0a, 0x08,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2e, 0x0a, 0x06, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x06, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x22, 0x55, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0xaa, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x4d, 0x50, 0x54,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x4d, 0x50, 0x54, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52,
	0x4f, 0x4d, 0x50, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f,
	0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x4d,
	0x50, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x4c, 0x49, 0x4e,
	0x45, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x4d, 0x50, 0x54, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12,
	0x50, 0x52, 0x4f, 0x4d, 0x50, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x55, 0x52, 0x56,
	0x45, 0x59, 0x10, 0x05, 0x42, 0xb5, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x0b, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x69, 0x6b, 0x72, 0x6f, 0x73, 0x2d, 0x64, 0x65,
	0x76, 0x2f, 0x6d, 0x69, 0x6b, 0x72, 0x6f, 0x73, 0x2d, 0x63, 0x6c, 0x69, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x3b, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0xa2, 0x02, 0x03, 0x50, 0x53, 0x58, 0xaa, 0x02, 0x0e, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0xca, 0x02, 0x0e, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x5c, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0xe2, 0x02, 0x1a,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x5c, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x3a, 0x3a, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plugin_survey_survey_proto_rawDescOnce sync.Once
	file_plugin_survey_survey_proto_rawDescData = file_plugin_survey_survey_proto_rawDesc
)

func file_plugin_survey_survey_proto_rawDescGZIP() []byte {
	file_plugin_survey_survey_proto_rawDescOnce.Do(func() {
		file_plugin_survey_survey_proto_rawDescData = protoimpl.X.CompressGZIP(file_plugin_survey_survey_proto_rawDescData)
	})
	return file_plugin_survey_survey_proto_rawDescData
}

var file_plugin_survey_survey_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_plugin_survey_survey_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_plugin_survey_survey_proto_goTypes = []any{
	(PromptKind)(0),           // 0: plugins.survey.PromptKind
	(*Survey)(nil),            // 1: plugins.survey.Survey
	(*Question)(nil),          // 2: plugins.survey.Question
	(*QuestionCondition)(nil), // 3: plugins.survey.QuestionCondition
	(*structpb.Value)(nil),    // 4: google.protobuf.Value
}
var file_plugin_survey_survey_proto_depIdxs = []int32{
	2, // 0: plugins.survey.Survey.confirm_question:type_name -> plugins.survey.Question
	2, // 1: plugins.survey.Survey.questions:type_name -> plugins.survey.Question
	0, // 2: plugins.survey.Question.prompt:type_name -> plugins.survey.PromptKind
	3, // 3: plugins.survey.Question.condition:type_name -> plugins.survey.QuestionCondition
	1, // 4: plugins.survey.Question.survey:type_name -> plugins.survey.Survey
	4, // 5: plugins.survey.QuestionCondition.value:type_name -> google.protobuf.Value
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_plugin_survey_survey_proto_init() }
func file_plugin_survey_survey_proto_init() {
	if File_plugin_survey_survey_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plugin_survey_survey_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_plugin_survey_survey_proto_goTypes,
		DependencyIndexes: file_plugin_survey_survey_proto_depIdxs,
		EnumInfos:         file_plugin_survey_survey_proto_enumTypes,
		MessageInfos:      file_plugin_survey_survey_proto_msgTypes,
	}.Build()
	File_plugin_survey_survey_proto = out.File
	file_plugin_survey_survey_proto_rawDesc = nil
	file_plugin_survey_survey_proto_goTypes = nil
	file_plugin_survey_survey_proto_depIdxs = nil
}
